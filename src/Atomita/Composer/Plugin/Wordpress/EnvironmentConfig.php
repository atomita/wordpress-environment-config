<?php

namespace Atomita\Composer\Plugin\Wordpress;

use Composer\Composer;
use Composer\EventDispatcher\EventSubscriberInterface;
use Composer\IO\IOInterface;
use Composer\Plugin\PluginInterface;
use Composer\Script\ScriptEvents;
use Composer\Script\Event as ScriptEvent;
use Composer\Util\Filesystem;

/**
 *
 */
class EnvironmentConfig implements PluginInterface, EventSubscriberInterface
{
	private $banner = '@generated by atomita/wp-environment-config';

	protected $servername_switch = <<<EOD
switch (\$_SERVER['SERVER_NAME']){
	case '':
		defined('ENVIRONMENT', 'production');
		break;
	case '':
		defined('ENVIRONMENT', 'staging');
		break;
}
EOD;

	protected $call_environment = <<<EOD
if (!defined('ABSPATH')){
	define('ABSPATH', dirname(__FILE__) . '/');
}

// environment
if (include(dirname(__FILE__) . '/wp-environment-config.php')){
    return;
}
EOD;

	protected $process_environment = <<<EOD
if (defined('ENVIRONMENT')) {
	\$env = ENVIRONMENT;
}
else {
	if (!empty(\$_SERVER['EXECUTION_ENVIRONMENT'])){
		\$env = \$_SERVER['EXECUTION_ENVIRONMENT'];
	}
	else if (!empty(\$_SERVER['REDIRECT_EXECUTION_ENVIRONMENT'])){
		\$env = \$_SERVER['REDIRECT_EXECUTION_ENVIRONMENT'];
	}
	else{
		if (false !== strpos(\$_SERVER['SERVER_NAME'], 'localhost')){
			\$env = 'local';
		}
		else {
			\$env = 'development';
		}

	}
	
	define('ENVIRONMENT', \$env);
}


\$environment_config_file = dirname(__FILE__) . "/wp-environment-config/{\$env}/wp-config.php";
if (file_exists(\$environment_config_file)) {
	include \$environment_config_file;
	return true;
}

return false;
EOD;

	protected $composer;
	protected $io;

	public function activate(Composer $composer, IOInterface $io)
	{
		$this->composer	 = $composer;
		$this->io		 = $io;
	}


	public static function getSubscribedEvents()
	{
		return array(
			ScriptEvents::POST_INSTALL_CMD => array(
				array('onPostInstallCommand', 0)
			),
		);
	}

	public function onPostInstallCommand(ScriptEvent $event)
	{
		$composer = $event->getComposer();
		$config   = $composer->getConfig();
		
		$filesystem	 = new Filesystem();

		if ($composer->getPackage()){
			$extra = $composer->getPackage()->getExtra();
		
			if (isset($extra['webroot-dir'])){
				$wp_dir			  = $extra['webroot-dir'];
				$wp_config_dir	  = "{$wp_dir}/wp-environment-config";
				$wp_config		  = $filesystem->normalizePath($wp_dir . '/wp-config.php');
				$wp_config_sample = $filesystem->normalizePath($wp_dir . '/wp-config-sample.php');
				
				if (!file_exists($wp_config) or false === strpos(file_get_contents($wp_config), $this->banner)){
					file_put_contents($wp_config, <<<EOD
<?php

{$this->servername_switch}

?>
<?php

// {$this->banner}

{$this->call_environment}

// @end generated

EOD
					);
				}
			
				// generate wp-environment-config.php
				file_put_contents($filesystem->normalizePath($wp_dir . '/wp-environment-config.php'), <<<EOD
<?php

// {$this->banner}

{$this->process_environment}

// @end generated

EOD
				);
			
				// copy wp-config-sample.php
				$filesystem->ensureDirectoryExists($wp_config);
			
				foreach (array('production', 'staging', 'development', 'local') as $env){
					if (!file_exists($filesystem->normalizePath($path = "{$wp_config_dir}/{$env}/wp-config-sample.php"))){
						$filesystem->ensureDirectoryExists("{$wp_config_dir}/{$env}");
						copy($wp_config_sample, $path);
					}
				}
			}
		}
	}

}
